<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>